module Program

imports Common
imports KBuiltinsBasic
exports

context-free syntax
context-free priorities
{
    Int -> AExp {}
    Id -> AExp {}
    String -> AExp {}
    AExp "/" AExp -> AExp {left, cons("AExp1423Syn")}
    AExp "*" AExp -> AExp {left, cons("AExp1367Syn")}
} > {
    AExp "+" AExp -> AExp {left, cons("AExp152Syn")}
    AExp "-" AExp -> AExp {left, cons("AExp129Syn")}
}

context-free priorities
{
    Bool -> BExp {}
    AExp "<=" AExp -> BExp {cons("BExp1409Syn")}
    AExp ">=" AExp -> BExp {cons("BExp1372Syn")}
    AExp "==" AExp -> BExp {cons("BExp13Syn")}
    "!" BExp -> BExp {cons("BExp1202Syn")}
} > {
    BExp "&&" BExp -> BExp {left, cons("BExp1346Syn")}
    BExp "||" BExp -> BExp {left, cons("BExp1366Syn")}
    BExp "==" BExp -> BExp {cons("BExp1286Syn")}
}

context-free priorities
{
    Block -> Stmt {}
    AExp "=" InsertDzAExp ";" -> Stmt {cons("Stmt1264Syn")}
    "if" "(" InsertDzBExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1420Syn")}
    "while" "(" InsertDzBExp ")" Block -> Stmt {cons("Stmt1360Syn")}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL" AExp -> Stmt {cons("Stmt1347Syn")}
    "INSPECT" InsertDzId "REPLACING ALL" InsertDzAExp "BY" AExp -> Stmt {cons("Stmt188Syn")}
} > {
    Stmt Stmt -> Stmt {left, cons("Stmt1254Syn")}
}

context-free start-symbols
DzString DzBool AExp AExps BExp String Int Stmt Float Bool Block Ids Id DzInt DzFloat K
context-free syntax
    DzString -> String {}
    "UNSTRING" InsertDzAExp "DELIMITED BY SPACE INTO" InsertDzAExps "END-UNSTRING" -> Stmt {cons("Stmt1244Syn")}
    "(" InsertDzAExp ")" -> AExp {cons("AExp1Bracket")}
    "String" InsertDzIds ";" -> Stmt {cons("Stmt1247Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1270Syn")}
    DzInt -> Int {}
    {Id ","}* -> Ids {cons("Ids1ListSyn")}
    "STRING" InsertDzAExp "DELIMITED BY SPACE" InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1249Syn")}
    DzFloat -> Float {}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt122Syn")}
    "{" InsertDzStmt "}" -> Block {cons("Block163Syn")}
    "{" "}" -> Block {cons("Block1397Syn")}
    "int" InsertDzIds ";" -> Stmt {cons("Stmt166Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1283Syn")}
    "UNSTRING" InsertDzAExp "DELIMITED BY SPACE INTO" InsertDzAExp "WITH POINTER" InsertDzAExp "END-UNSTRING" -> Stmt {cons("Stmt133Syn")}
    DzBool -> Bool {}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL-CHARACTERS" -> Stmt {cons("Stmt1203Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzId InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1373Syn")}
    "STRING" InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1404Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1343Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1223Syn")}
    {AExp ","}* -> AExps {cons("AExps1ListSyn")}
    "STRING" InsertDzAExp InsertDzAExp "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1303Syn")}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1239Syn")}
    "(" InsertDzBExp ")" -> BExp {cons("BExp1Bracket")}
    AExp -> InsertDzAExp
    AExps -> InsertDzAExps
    BExp -> InsertDzBExp
    Block -> InsertDzBlock
    Ids -> InsertDzIds
    Id -> InsertDzId
    Stmt -> InsertDzStmt


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}



%% start symbols subsorts
    KItem        -> K
    DzString        -> K
    DzBool        -> K
    AExp        -> K
    BExp        -> K
    String        -> K
    Int        -> K
    Stmt        -> K
    Float        -> K
    Bool        -> K
    Block        -> K
    Id        -> K
    DzInt        -> K
    DzFloat        -> K
lexical syntax
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


    "INTO" -> IdDz {reject}
    "INSPECT" -> IdDz {reject}
    "String" -> IdDz {reject}
    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "TALLYING" -> IdDz {reject}
    "BY" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "int" -> IdDz {reject}
    "true" -> IdDz {reject}
    "UNSTRING" -> IdDz {reject}
    "STRING" -> IdDz {reject}

lexical restrictions
    %% follow restrictions


lexical syntax
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "INTO" -> IdDz {reject}
    "INSPECT" -> IdDz {reject}
    "String" -> IdDz {reject}
    "while" -> IdDz {reject}
    "else" -> IdDz {reject}
    "TALLYING" -> IdDz {reject}
    "BY" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "if" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "false" -> IdDz {reject}
    "int" -> IdDz {reject}
    "true" -> IdDz {reject}
    "UNSTRING" -> IdDz {reject}
    "STRING" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
