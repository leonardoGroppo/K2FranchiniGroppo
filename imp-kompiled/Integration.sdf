module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "--Float" Float -> Float {cons("Float1293Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float17Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float197Syn")}
    Float "/Float" Float -> Float {left, cons("Float155Syn")}
    Float "%Float" Float -> Float {left, cons("Float1358Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1407Syn")}
    Float "-Float" Float -> Float {left, cons("Float1294Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map162Syn")}
} > {
    Map Map -> Map {left, cons("Map1209Syn")}
}

context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1320Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1398Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1298Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool194Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1288Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1396Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1392Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1330Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1349Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1402Syn")}
    K "=/=K" K -> Bool {left, cons("Bool174Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1402Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool130Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1274Syn")}
    K "=/=K" K -> Bool {left, cons("Bool174Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1392Syn")}
    "notBool" Bool -> Bool {cons("Bool1320Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1298Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1288Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1396Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool194Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1398Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool130Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1274Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1232Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int160Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int157Syn")}
    Int "/Int" Int -> Int {left, cons("Int189Syn")}
    Int "%Int" Int -> Int {left, cons("Int1278Syn")}
    Int "divInt" Int -> Int {left, cons("Int1363Syn")}
    Int "modInt" Int -> Int {left, cons("Int158Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1295Syn")}
    Int "-Int" Int -> Int {left, cons("Int1255Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int195Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1226Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1229Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int176Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int175Syn")}
}

context-free priorities
{
    Int -> AExp {}
    Id -> AExp {}
    String -> AExp {}
    AExp "/" AExp -> AExp {left, cons("AExp1423Syn")}
    AExp "*" AExp -> AExp {left, cons("AExp1367Syn")}
} > {
    AExp "+" AExp -> AExp {left, cons("AExp152Syn")}
    AExp "-" AExp -> AExp {left, cons("AExp129Syn")}
}

context-free priorities
{
    Bool -> BExp {}
    AExp "<=" AExp -> BExp {cons("BExp1409Syn")}
    AExp ">=" AExp -> BExp {cons("BExp1372Syn")}
    AExp "==" AExp -> BExp {cons("BExp13Syn")}
    ExclamationMarkDz BExp -> BExp {cons("BExp1202Syn")}
} > {
    BExp "&&" BExp -> BExp {left, cons("BExp1346Syn")}
    BExp "||" BExp -> BExp {left, cons("BExp1366Syn")}
    BExp "==" BExp -> BExp {cons("BExp1286Syn")}
}

context-free priorities
{
    Block -> Stmt {}
    AExp "=" InsertDzAExp ";" -> Stmt {cons("Stmt1264Syn")}
    "if" "(" InsertDzBExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1420Syn")}
    "while" "(" InsertDzBExp ")" Block -> Stmt {cons("Stmt1360Syn")}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL" AExp -> Stmt {cons("Stmt1347Syn")}
    "INSPECT" InsertDzId "REPLACING ALL" InsertDzAExp "BY" AExp -> Stmt {cons("Stmt188Syn")}
} > {
    Stmt Stmt -> Stmt {left, cons("Stmt1254Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    AExp -> AExps
    DzFloat -> Float
    DzInt -> Int
    Id -> AExp
    Block -> Stmt
    DzString -> String
    Id -> Ids
    Int -> AExp
    String -> AExp
    Ids -> AExps
    DzBool -> Bool
    Bool -> BExp
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
} .> {
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    K "inKList" KList -> Bool {cons("Bool14Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int15Syn")}
    "#EISDIR" -> IOError {cons("IOError16Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map18Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float19Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map120Syn")}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt122Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float123Syn")}
    Map "=Map" Map -> Bool {cons("Bool124Syn")}
    Set "=Set" Set -> Bool {cons("Bool125Syn")}
    String "<String" String -> Bool {cons("Bool126Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float127Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List128Syn")}
    ".List" -> List {cons("List132Syn")}
    "UNSTRING" InsertDzAExp "DELIMITED BY SPACE INTO" InsertDzAExp "WITH POINTER" InsertDzAExp "END-UNSTRING" -> Stmt {cons("Stmt133Syn")}
    "#EBADF" -> IOError {cons("IOError134Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream135Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String136Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool137Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool138Syn")}
    "#stderr" -> Int {cons("Int139Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool140Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int142Syn")}
    Map "-Map" Map -> Map {cons("Map143Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float144Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String145Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String146Syn")}
    Set "-Set" Set -> Set {cons("Set147Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool148Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel149Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream150Syn")}
    String "=/=String" String -> Bool {left, cons("Bool153Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id154Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel156Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int159Syn")}
    K "|->" K -> Map {cons("Map162Syn")}
    "{" InsertDzStmt "}" -> Block {cons("Block163Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int164Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int165Syn")}
    "int" InsertDzIds ";" -> Stmt {cons("Stmt166Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map167Syn")}
    Int "=Int" Int -> Bool {cons("Bool168Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List169Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float170Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int172Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float173Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList177Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String178Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem179Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float180Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList182Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool183Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool184Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int185Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int186Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float187Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int190Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K192Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List193Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String196Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float198Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String199Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1200Syn")}
    DzBool -> Bool {}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL-CHARACTERS" -> Stmt {cons("Stmt1203Syn")}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1204Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1205Syn")}
    KList "=KList" KList -> Bool {cons("Bool1206Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1207Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1208Syn")}
    Map Map -> Map {left, cons("Map1209Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1220Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1222Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1223Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1224Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1225Syn")}
    "#noIO" -> Stream {cons("Stream1227Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1228Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1230Syn")}
    "#EACCES" -> IOError {cons("IOError1233Syn")}
    List "=List" List -> Bool {cons("Bool1234Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1235Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1236Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1237Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1238Syn")}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1239Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1240Syn")}
    Set Set -> Set {left, cons("Set1243Syn")}
    "UNSTRING" InsertDzAExp "DELIMITED BY SPACE INTO" InsertDzAExps "END-UNSTRING" -> Stmt {cons("Stmt1244Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1245Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1246Syn")}
    "String" InsertDzIds ";" -> Stmt {cons("Stmt1247Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1248Syn")}
    Id "," Ids -> Ids {cons("Ids1ListSyn")}
    ".Ids" -> Ids {cons("Ids1Empty")}
    "STRING" InsertDzAExp "DELIMITED BY SPACE" InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1249Syn")}
    K "#inKList" KList -> Bool {cons("Bool1250Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1252Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1253Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1256Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1257Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1258Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1259Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1260Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1262Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1263Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1265Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1266Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1267Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1268Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1269Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1270Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1273Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1275Syn")}
    DzFloat -> Float {}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1277Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1279Syn")}
    "#ELOOP" -> IOError {cons("IOError1280Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1282Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1283Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1284Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1285Syn")}
    "#stdin" -> Int {cons("Int1287Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1289Syn")}
    "#configuration" -> Bag {cons("Bag1290Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1292Syn")}
    AExp "," AExps -> AExps {cons("AExps1ListSyn")}
    ".AExps" -> AExps {cons("AExps1Empty")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1296Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1299Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1300Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1302Syn")}
    "STRING" InsertDzAExp InsertDzAExp "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1303Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1304Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1305Syn")}
    ".Set" -> Set {cons("Set1306Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1307Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1308Syn")}
    List List -> List {left, cons("List1309Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1322Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1323Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1324Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1325Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1326Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1327Syn")}
    String "==String" String -> Bool {left, cons("Bool1328Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1329Syn")}
    String "+String" String -> String {left, cons("String1332Syn")}
    String ">=String" String -> Bool {cons("Bool1333Syn")}
    K "in" Set -> Bool {cons("Bool1334Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1335Syn")}
    ".Map" -> Map {cons("Map1336Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1337Syn")}
    KList "==KList" KList -> Bool {cons("Bool1338Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1339Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1342Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1343Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1344Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1345Syn")}
    "#ENOENT" -> IOError {cons("IOError1348Syn")}
    "#EINVAL" -> IOError {cons("IOError1350Syn")}
    String ">String" String -> Bool {cons("Bool1352Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1353Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1354Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1355Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1356Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1357Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1359Syn")}
    "#stdout" -> Int {cons("Int1362Syn")}
    "#noparse" -> IOError {cons("IOError1364Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1365Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1368Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1369Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1370Syn")}
    "STRING" InsertDzId InsertDzAExp InsertDzId InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1373Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1374Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1375Syn")}
    KResult -> KItem {}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1376Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1377Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1378Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1379Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1380Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1382Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1383Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1384Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1385Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1386Syn")}
    String "<=String" String -> Bool {cons("Bool1388Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1389Syn")}
    "#EOF" -> IOError {cons("IOError1390Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1393Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1394Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1395Syn")}
    "{" "}" -> Block {cons("Block1397Syn")}
    K "=K" K -> Bool {cons("Bool1399Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1400Syn")}
    "#ESPIPE" -> IOError {cons("IOError1403Syn")}
    "STRING" InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1404Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1405Syn")}
    K "in" List -> Bool {cons("Bool1406Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1408Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1422Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1424Syn")}
    AExp    -> InsertDzAExp
    AExps    -> InsertDzAExps
    Set    -> InsertDzSet
    BExp    -> InsertDzBExp
    K    -> InsertDzK
    String    -> InsertDzString
    KList    -> InsertDzKList
    Int    -> InsertDzInt
    Stmt    -> InsertDzStmt
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    Block    -> InsertDzBlock
    Ids    -> InsertDzIds
    List    -> InsertDzList
    Id    -> InsertDzId
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":AExp"        -> AExpDzVar            {cons("AExp12Var")}
    VARID  ":AExp{" TagListDz "}"        -> AExpDzVar            {cons("AExp12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":Stmt"        -> StmtDzVar            {cons("Stmt12Var")}
    VARID  ":Stmt{" TagListDz "}"        -> StmtDzVar            {cons("Stmt12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":Ids"        -> IdsDzVar            {cons("Ids12Var")}
    VARID  ":Ids{" TagListDz "}"        -> IdsDzVar            {cons("Ids12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":AExps"        -> AExpsDzVar            {cons("AExps12Var")}
    VARID  ":AExps{" TagListDz "}"        -> AExpsDzVar            {cons("AExps12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":BExp"        -> BExpDzVar            {cons("BExp12Var")}
    VARID  ":BExp{" TagListDz "}"        -> BExpDzVar            {cons("BExp12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":Block"        -> BlockDzVar            {cons("Block12Var")}
    VARID  ":Block{" TagListDz "}"        -> BlockDzVar            {cons("Block12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "AExp"    -> VariableDz    {cons("AExp1Cast")}
     K CastTypeDz "AExp{" TagListDz "}"    -> VariableDz    {cons("AExp1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Ids"    -> VariableDz    {cons("Ids1Cast")}
     K CastTypeDz "Ids{" TagListDz "}"    -> VariableDz    {cons("Ids1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "AExps"    -> VariableDz    {cons("AExps1Cast")}
     K CastTypeDz "AExps{" TagListDz "}"    -> VariableDz    {cons("AExps1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "BExp"    -> VariableDz    {cons("BExp1Cast")}
     K CastTypeDz "BExp{" TagListDz "}"    -> VariableDz    {cons("BExp1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Block"    -> VariableDz    {cons("Block1Cast")}
     K CastTypeDz "Block{" TagListDz "}"    -> VariableDz    {cons("Block1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     NatDzVar   -> Nat
     AExpDzVar   -> AExp
     SetDzVar   -> Set
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     IdsDzVar   -> Ids
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     AExpsDzVar   -> AExps
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     BExpDzVar   -> BExp
     FloatDzVar   -> Float
     IOErrorDzVar   -> IOError
     BlockDzVar   -> Block
     IdDzVar   -> Id
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    AExpDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    StmtDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    IdsDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    AExpsDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    BExpDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    BlockDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "NaN" -> DzDzFloat
    "false" -> DzDzBool


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isAExp"      -> DzKLabel
    "isSymbolicAExp"      -> DzKLabel
    "#symAExp"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isIds"      -> DzKLabel
    "isSymbolicIds"      -> DzKLabel
    "#symIds"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isAExps"      -> DzKLabel
    "isSymbolicAExps"      -> DzKLabel
    "#symAExps"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isBExp"      -> DzKLabel
    "isSymbolicBExp"      -> DzKLabel
    "#symBExp"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isBlock"      -> DzKLabel
    "isSymbolicBlock"      -> DzKLabel
    "#symBlock"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel



%% terminals reject
    "String" -> VARID {reject}
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "INTO" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "BY" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "STRING" -> VARID {reject}
    "INSPECT" -> VARID {reject}
    "TALLYING" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "UNSTRING" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "==" -/- [I].[n].[t]
    "*" -/- [F].[l].[o].[a].[t]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "/" -/- [I].[n].[t]
    "==" -/- [K]
    "==" -/- [B].[a].[g]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "=K" -/- [L].[a].[b].[e].[l]
    ">=" -/- [S].[t].[r].[i].[n].[g]
    ">=" -/- [I].[n].[t]
    "=" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "<=" -/- [S].[e].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "+" -/- [I].[n].[t]
    "=" -/- [K].[L].[i].[s].[t]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "+" -/- [S].[t].[r].[i].[n].[g]
    "=" -/- [I].[n].[t]
    "==" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [I].[n].[t]
    "-" -/- [S].[e].[t]
    "=/=K" -/- [L].[i].[s].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    ">=" -/- [F].[l].[o].[a].[t]
    "==" -/- [B].[o].[o].[l]
    "-" -/- [M].[a].[p]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "==" -/- [K].[L].[i].[s].[t]
    "fresh" -/- [I].[d]
    "<=" -/- [S].[t].[r].[i].[n].[g]
    "*" -/- [I].[n].[t]
    "==" -/- [F].[l].[o].[a].[t]
    "+" -/- [F].[l].[o].[a].[t]
    "fresh" -/- [I].[n].[t]
    "<=" -/- [M].[a].[p]
    "==" -/- [K].[L].[a].[b].[e].[l]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "<=" -/- [F].[l].[o].[a].[t]
    "/" -/- [F].[l].[o].[a].[t]
    "=" -/- [M].[a].[p]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
