module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

exports

context-free syntax
context-free priorities
{
    "--Float" Float -> Float {cons("Float1295Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float18Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float199Syn")}
    Float "/Float" Float -> Float {left, cons("Float155Syn")}
    Float "%Float" Float -> Float {left, cons("Float1360Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1409Syn")}
    Float "-Float" Float -> Float {left, cons("Float1296Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map162Syn")}
} > {
    Map Map -> Map {left, cons("Map1223Syn")}
}

context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1323Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1400Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1300Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool196Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1290Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1398Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1394Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1333Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1352Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1404Syn")}
    K "=/=K" K -> Bool {left, cons("Bool174Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1404Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool132Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1276Syn")}
    K "=/=K" K -> Bool {left, cons("Bool174Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1394Syn")}
    "notBool" Bool -> Bool {cons("Bool1323Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1300Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1290Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1398Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool196Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1400Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool132Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1276Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1235Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int160Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int157Syn")}
    Int "/Int" Int -> Int {left, cons("Int190Syn")}
    Int "%Int" Int -> Int {left, cons("Int1280Syn")}
    Int "divInt" Int -> Int {left, cons("Int1365Syn")}
    Int "modInt" Int -> Int {left, cons("Int158Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1297Syn")}
    Int "-Int" Int -> Int {left, cons("Int1257Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int197Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1228Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1233Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int177Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int175Syn")}
}

context-free priorities
{
    Int -> AExp {}
    Id -> AExp {}
    String -> AExp {}
    AExp "/" AExp -> AExp {left, cons("AExp1425Syn")}
    AExp "*" AExp -> AExp {left, cons("AExp1369Syn")}
} > {
    AExp "+" AExp -> AExp {left, cons("AExp152Syn")}
    AExp "-" AExp -> AExp {left, cons("AExp130Syn")}
}

context-free priorities
{
    Bool -> BExp {}
    AExp "<=" AExp -> BExp {cons("BExp1422Syn")}
    AExp ">=" AExp -> BExp {cons("BExp1374Syn")}
    AExp "==" AExp -> BExp {cons("BExp13Syn")}
    "!" BExp -> BExp {cons("BExp1204Syn")}
} > {
    BExp "&&" BExp -> BExp {left, cons("BExp1348Syn")}
    BExp "||" BExp -> BExp {left, cons("BExp1368Syn")}
    BExp "==" BExp -> BExp {cons("BExp1288Syn")}
}

context-free priorities
{
    Block -> Stmt {}
    AExp "=" InsertDzAExp ";" -> Stmt {cons("Stmt1266Syn")}
    "if" "(" InsertDzBExp ")" InsertDzBlock "else" Block -> Stmt {cons("Stmt1423Syn")}
    "while" "(" InsertDzBExp ")" Block -> Stmt {cons("Stmt1363Syn")}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL" AExp -> Stmt {cons("Stmt1349Syn")}
    "INSPECT" InsertDzId "REPLACING ALL" InsertDzAExp "BY" AExp -> Stmt {cons("Stmt189Syn")}
    "PERFORM" InsertDzAExp "VARYING" InsertDzId "FROM" InsertDzAExp "BY" InsertDzAExp "UNTIL" InsertDzId "=" AExp -> Stmt {cons("Stmt176Syn")}
    "PERFORM" InsertDzAExp "VARYING" InsertDzId "BY" InsertDzAExp "UNTIL" AExp -> Stmt {cons("Stmt1389Syn")}
} > {
    Stmt Stmt -> Stmt {left, cons("Stmt1256Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    AExp -> AExps
    DzFloat -> Float
    DzInt -> Int
    Id -> AExp
    Block -> Stmt
    DzString -> String
    Id -> Ids
    Int -> AExp
    String -> AExp
    Ids -> AExps
    DzBool -> Bool
    Bool -> BExp
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
} .> {
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> AExp
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> Int
    K -> Stmt
    K -> Bool
    K -> Char
    K -> Ids
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> AExps
    K -> PascalCaseId
    K -> UpperCase
    K -> BExp
    K -> Float
    K -> IOError
    K -> Block
    K -> Id
    K -> Map
    K -> DzFloat
} .> {
    Nat -> K
    AExp -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    Int -> K
    Stmt -> K
    Bool -> K
    Char -> K
    Ids -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    AExps -> K
    PascalCaseId -> K
    UpperCase -> K
    BExp -> K
    Float -> K
    IOError -> K
    Block -> K
    Id -> K
    Map -> K
    DzFloat -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    K "inKList" KList -> Bool {cons("Bool14Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int15Syn")}
    "STRING" InsertDzId InsertDzAExp "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt16Syn")}
    "#EISDIR" -> IOError {cons("IOError17Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map19Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float120Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map122Syn")}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt123Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float124Syn")}
    Map "=Map" Map -> Bool {cons("Bool125Syn")}
    Set "=Set" Set -> Bool {cons("Bool126Syn")}
    String "<String" String -> Bool {cons("Bool127Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float128Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List129Syn")}
    ".List" -> List {cons("List133Syn")}
    "#EBADF" -> IOError {cons("IOError134Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream135Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String136Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool137Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool138Syn")}
    "#stderr" -> Int {cons("Int139Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool140Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int142Syn")}
    Map "-Map" Map -> Map {cons("Map143Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float144Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String145Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String146Syn")}
    Set "-Set" Set -> Set {cons("Set147Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool148Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel149Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream150Syn")}
    String "=/=String" String -> Bool {left, cons("Bool153Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id154Syn")}
    DzInt -> Int {}
    "#freezer" K -> KLabel {cons("KLabel156Syn")}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int159Syn")}
    K "|->" K -> Map {cons("Map162Syn")}
    "{" InsertDzStmt "}" -> Block {cons("Block163Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int164Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int165Syn")}
    "int" InsertDzIds ";" -> Stmt {cons("Stmt166Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map167Syn")}
    Int "=Int" Int -> Bool {cons("Bool168Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List169Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float170Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int172Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float173Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList178Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String179Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem180Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float182Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList183Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool184Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool185Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int186Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int187Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float188Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int192Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K193Syn")}
    "STRING" InsertDzAExp InsertDzId "SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt194Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List195Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String198Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1200Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1202Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1203Syn")}
    DzBool -> Bool {}
    "INSPECT" InsertDzAExp "TALLYING" InsertDzId "FOR ALL-CHARACTERS" -> Stmt {cons("Stmt1205Syn")}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1206Syn")}
    AExp ":{" "}" -> Block {cons("Block1207Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1208Syn")}
    KList "=KList" KList -> Bool {cons("Bool1209Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1220Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1222Syn")}
    Map Map -> Map {left, cons("Map1223Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1224Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1225Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1226Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1227Syn")}
    "#noIO" -> Stream {cons("Stream1229Syn")}
    "UNSTRING" InsertDzAExp "DELIMITED BY SPACE INTO" InsertDzIds "END-UNSTRING" -> Stmt {cons("Stmt1230Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1232Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1234Syn")}
    "#EACCES" -> IOError {cons("IOError1236Syn")}
    List "=List" List -> Bool {cons("Bool1237Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1238Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1239Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1240Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1242Syn")}
    "STRING" InsertDzId "DELIMITED BY SIZE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1243Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1244Syn")}
    Set Set -> Set {left, cons("Set1246Syn")}
    "PERFORM" InsertDzAExp InsertDzAExp "TIMES" -> Stmt {cons("Stmt1247Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1248Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1249Syn")}
    "String" InsertDzIds ";" -> Stmt {cons("Stmt1250Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1252Syn")}
    Id "," Ids -> Ids {cons("Ids1ListSyn")}
    ".Ids" -> Ids {cons("Ids1Empty")}
    K "#inKList" KList -> Bool {cons("Bool1253Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1254Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1255Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1258Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1259Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1260Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1262Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1263Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1264Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1265Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1267Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1268Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1269Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1270Syn")}
    DzString -> String {}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1272Syn")}
    AExp ":{" InsertDzStmt "}" -> Block {cons("Block1273Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1275Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1277Syn")}
    DzFloat -> Float {}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1279Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1282Syn")}
    "#ELOOP" -> IOError {cons("IOError1283Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1284Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SIZE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1285Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1286Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1287Syn")}
    "#stdin" -> Int {cons("Int1289Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1292Syn")}
    "#configuration" -> Bag {cons("Bag1293Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1294Syn")}
    AExp "," AExps -> AExps {cons("AExps1ListSyn")}
    ".AExps" -> AExps {cons("AExps1Empty")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1298Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1302Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1303Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1304Syn")}
    "STRING" InsertDzAExp InsertDzAExp "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1305Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1306Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1307Syn")}
    ".Set" -> Set {cons("Set1308Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1309Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1320Syn")}
    List List -> List {left, cons("List1322Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1324Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1325Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1326Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1327Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1328Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1329Syn")}
    String "==String" String -> Bool {left, cons("Bool1330Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1332Syn")}
    String "+String" String -> String {left, cons("String1334Syn")}
    String ">=String" String -> Bool {cons("Bool1335Syn")}
    K "in" Set -> Bool {cons("Bool1336Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1337Syn")}
    ".Map" -> Map {cons("Map1338Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1339Syn")}
    KList "==KList" KList -> Bool {cons("Bool1340Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1342Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1344Syn")}
    "STRING" InsertDzId "DELIMITED BY SPACE" InsertDzId "DELIMITED BY SPACE INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1345Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1346Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1347Syn")}
    "#ENOENT" -> IOError {cons("IOError1350Syn")}
    "#EINVAL" -> IOError {cons("IOError1353Syn")}
    String ">String" String -> Bool {cons("Bool1354Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1355Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1356Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1357Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1358Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1359Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1362Syn")}
    "#stdout" -> Int {cons("Int1364Syn")}
    "#noparse" -> IOError {cons("IOError1366Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1367Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1370Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1372Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1373Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1375Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1376Syn")}
    KResult -> KItem {}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1377Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1378Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1379Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1380Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1382Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1383Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1384Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1385Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1386Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1387Syn")}
    String "<=String" String -> Bool {cons("Bool1390Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1392Syn")}
    "#EOF" -> IOError {cons("IOError1393Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1395Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1396Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1397Syn")}
    "{" "}" -> Block {cons("Block1399Syn")}
    K "=K" K -> Bool {cons("Bool1402Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1403Syn")}
    "#ESPIPE" -> IOError {cons("IOError1405Syn")}
    "STRING" InsertDzAExp InsertDzId "INTO" InsertDzId "END-STRING" -> Stmt {cons("Stmt1406Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1407Syn")}
    K "in" List -> Bool {cons("Bool1408Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1420Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1424Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1426Syn")}
    AExp -> InsertDzAExp
    Set -> InsertDzSet
    BExp -> InsertDzBExp
    K -> InsertDzK
    String -> InsertDzString
    KList -> InsertDzKList
    Int -> InsertDzInt
    Stmt -> InsertDzStmt
    Float -> InsertDzFloat
    KLabel -> InsertDzKLabel
    Bool -> InsertDzBool
    Char -> InsertDzChar
    Block -> InsertDzBlock
    Ids -> InsertDzIds
    List -> InsertDzList
    Id -> InsertDzId
    Map -> InsertDzMap
    KItem -> InsertDzKItem

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "AExp"    -> VariableDz    {cons("AExp1Cast")}
     K CastTypeDz "AExp{" TagListDz "}"    -> VariableDz    {cons("AExp1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "Stmt"    -> VariableDz    {cons("Stmt1Cast")}
     K CastTypeDz "Stmt{" TagListDz "}"    -> VariableDz    {cons("Stmt1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "Ids"    -> VariableDz    {cons("Ids1Cast")}
     K CastTypeDz "Ids{" TagListDz "}"    -> VariableDz    {cons("Ids1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "AExps"    -> VariableDz    {cons("AExps1Cast")}
     K CastTypeDz "AExps{" TagListDz "}"    -> VariableDz    {cons("AExps1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "BExp"    -> VariableDz    {cons("BExp1Cast")}
     K CastTypeDz "BExp{" TagListDz "}"    -> VariableDz    {cons("BExp1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "Block"    -> VariableDz    {cons("Block1Cast")}
     K CastTypeDz "Block{" TagListDz "}"    -> VariableDz    {cons("Block1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     K CastTypeDz "K"        -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"    -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}
     NatDzVar   -> Nat
     AExpDzVar   -> AExp
     SetDzVar   -> Set
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     IntDzVar   -> Int
     StmtDzVar   -> Stmt
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     IdsDzVar   -> Ids
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     AExpsDzVar   -> AExps
     PascalCaseIdDzVar   -> PascalCaseId
     UpperCaseDzVar   -> UpperCase
     BExpDzVar   -> BExp
     FloatDzVar   -> Float
     IOErrorDzVar   -> IOError
     BlockDzVar   -> Block
     IdDzVar   -> Id
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "NaN" -> DzDzFloat
    "false" -> DzDzBool


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isAExp"      -> DzKLabel
    "isSymbolicAExp"      -> DzKLabel
    "#symAExp"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isStmt"      -> DzKLabel
    "isSymbolicStmt"      -> DzKLabel
    "#symStmt"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isIds"      -> DzKLabel
    "isSymbolicIds"      -> DzKLabel
    "#symIds"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isAExps"      -> DzKLabel
    "isSymbolicAExps"      -> DzKLabel
    "#symAExps"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isBExp"      -> DzKLabel
    "isSymbolicBExp"      -> DzKLabel
    "#symBExp"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isBlock"      -> DzKLabel
    "isSymbolicBlock"      -> DzKLabel
    "#symBlock"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel



%% terminals reject
lexical restrictions
    %% follow restrictions
    "==" -/- [I].[n].[t]
    "*" -/- [F].[l].[o].[a].[t]
    "=" -/- [K].[L].[a].[b].[e].[l]
    "/" -/- [I].[n].[t]
    "==" -/- [K]
    "==" -/- [B].[a].[g]
    "-" -/- [F].[l].[o].[a].[t]
    "replace" -/- [A].[l].[l]
    "=" -/- [K]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "=K" -/- [L].[a].[b].[e].[l]
    ">=" -/- [S].[t].[r].[i].[n].[g]
    ">=" -/- [I].[n].[t]
    "=" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
    "<=" -/- [S].[e].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "=" -/- [B].[a].[g]
    "+" -/- [I].[n].[t]
    "=" -/- [K].[L].[i].[s].[t]
    "-" -/- [I].[n].[t]
    "#parse" -/- [I].[n].[p].[u].[t]
    "#parse" -/- [T].[o].[k].[e].[n]
    "+" -/- [S].[t].[r].[i].[n].[g]
    "=" -/- [I].[n].[t]
    "==" -/- [S].[t].[r].[i].[n].[g]
    "<=" -/- [I].[n].[t]
    "-" -/- [S].[e].[t]
    "=/=K" -/- [L].[i].[s].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=" -/- [S].[e].[t]
    "=K" -/- [L].[i].[s].[t]
    ">=" -/- [F].[l].[o].[a].[t]
    "==" -/- [B].[o].[o].[l]
    "-" -/- [M].[a].[p]
    "==K" -/- [L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "==" -/- [K].[L].[i].[s].[t]
    "fresh" -/- [I].[d]
    "<=" -/- [S].[t].[r].[i].[n].[g]
    "*" -/- [I].[n].[t]
    "==" -/- [F].[l].[o].[a].[t]
    "+" -/- [F].[l].[o].[a].[t]
    "fresh" -/- [I].[n].[t]
    "<=" -/- [M].[a].[p]
    "==" -/- [K].[L].[a].[b].[e].[l]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "<=" -/- [F].[l].[o].[a].[t]
    "/" -/- [F].[l].[o].[a].[t]
    "=" -/- [M].[a].[p]
context-free restrictions
    NatDzVar -/- [a-zA-Z0-9\{]
    AExpDzVar -/- [a-zA-Z0-9\{]
    SetDzVar -/- [a-zA-Z0-9\{]
    MIntDzVar -/- [a-zA-Z0-9\{]
    LowerCaseDzVar -/- [a-zA-Z0-9\{]
    CamelCaseIdDzVar -/- [a-zA-Z0-9\{]
    StringDzVar -/- [a-zA-Z0-9\{]
    IntDzVar -/- [a-zA-Z0-9\{]
    StmtDzVar -/- [a-zA-Z0-9\{]
    BoolDzVar -/- [a-zA-Z0-9\{]
    CharDzVar -/- [a-zA-Z0-9\{]
    IdsDzVar -/- [a-zA-Z0-9\{]
    ListDzVar -/- [a-zA-Z0-9\{]
    StreamDzVar -/- [a-zA-Z0-9\{]
    DzIntDzVar -/- [a-zA-Z0-9\{]
    DzStringDzVar -/- [a-zA-Z0-9\{]
    DzBoolDzVar -/- [a-zA-Z0-9\{]
    AExpsDzVar -/- [a-zA-Z0-9\{]
    PascalCaseIdDzVar -/- [a-zA-Z0-9\{]
    UpperCaseDzVar -/- [a-zA-Z0-9\{]
    BExpDzVar -/- [a-zA-Z0-9\{]
    FloatDzVar -/- [a-zA-Z0-9\{]
    IOErrorDzVar -/- [a-zA-Z0-9\{]
    BlockDzVar -/- [a-zA-Z0-9\{]
    IdDzVar -/- [a-zA-Z0-9\{]
    MapDzVar -/- [a-zA-Z0-9\{]
    DzFloatDzVar -/- [a-zA-Z0-9\{]
    VariableDz -/- [a-zA-Z0-9\{]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    [A-Za-z\_][A-Za-z0-9\_]* -> IdDz
    "fpNaN" -> IdDz {reject}
    "updateMap" -> IdDz {reject}
    "directionalityChar" -> IdDz {reject}
    "String" -> IdDz {reject}
    "removeAll" -> IdDz {reject}
    "trim" -> IdDz {reject}
    "categoryChar" -> IdDz {reject}
    "exponentBitsFloat" -> IdDz {reject}
    "ordChar" -> IdDz {reject}
    "Int2Float" -> IdDz {reject}
    "sinFloat" -> IdDz {reject}
    "size" -> IdDz {reject}
    "getKLabel" -> IdDz {reject}
    "minFloat" -> IdDz {reject}
    "tanFloat" -> IdDz {reject}
    "String2Base" -> IdDz {reject}
    "Base2String" -> IdDz {reject}
    "INTO" -> IdDz {reject}
    "replaceFirst" -> IdDz {reject}
    "KLabel2String" -> IdDz {reject}
    "isInfinite" -> IdDz {reject}
    "acosFloat" -> IdDz {reject}
    "BY" -> IdDz {reject}
    "xorBool" -> IdDz {reject}
    "Infinity" -> IdDz {reject}
    "maxInt" -> IdDz {reject}
    "undef" -> IdDz {reject}
    "atanFloat" -> IdDz {reject}
    "rootFloat" -> IdDz {reject}
    "minValueFloat" -> IdDz {reject}
    "STRING" -> IdDz {reject}
    "isKResult" -> IdDz {reject}
    "xorInt" -> IdDz {reject}
    "INSPECT" -> IdDz {reject}
    "notBool" -> IdDz {reject}
    "roundFloat" -> IdDz {reject}
    "isNaN" -> IdDz {reject}
    "TALLYING" -> IdDz {reject}
    "lengthString" -> IdDz {reject}
    "floorFloat" -> IdDz {reject}
    "VARYING" -> IdDz {reject}
    "ltrim" -> IdDz {reject}
    "isBuiltin" -> IdDz {reject}
    "sqrtFloat" -> IdDz {reject}
    "orBool" -> IdDz {reject}
    "countAllOccurrences" -> IdDz {reject}
    "precisionFloat" -> IdDz {reject}
    "replaceAll" -> IdDz {reject}
    "expFloat" -> IdDz {reject}
    "rfindChar" -> IdDz {reject}
    "NaN" -> IdDz {reject}
    "minusInfinity" -> IdDz {reject}
    "intersectSet" -> IdDz {reject}
    "freshId" -> IdDz {reject}
    "signFloat" -> IdDz {reject}
    "false" -> IdDz {reject}
    "String2Int" -> IdDz {reject}
    "ListItem" -> IdDz {reject}
    "fresh" -> IdDz {reject}
    "freshInt" -> IdDz {reject}
    "rfindString" -> IdDz {reject}
    "Float2Int" -> IdDz {reject}
    "dummy" -> IdDz {reject}
    "PERFORM" -> IdDz {reject}
    "findString" -> IdDz {reject}
    "dividesInt" -> IdDz {reject}
    "else" -> IdDz {reject}
    "if" -> IdDz {reject}
    "in" -> IdDz {reject}
    "cosFloat" -> IdDz {reject}
    "Float2String" -> IdDz {reject}
    "String2Id" -> IdDz {reject}
    "divInt" -> IdDz {reject}
    "absInt" -> IdDz {reject}
    "bool2Int" -> IdDz {reject}
    "ceilFloat" -> IdDz {reject}
    "chrChar" -> IdDz {reject}
    "randomRandom" -> IdDz {reject}
    "range" -> IdDz {reject}
    "plusInfinity" -> IdDz {reject}
    "cool" -> IdDz {reject}
    "significandFloat" -> IdDz {reject}
    "maxValueFloat" -> IdDz {reject}
    "String2Float" -> IdDz {reject}
    "choice" -> IdDz {reject}
    "impliesBool" -> IdDz {reject}
    "andThenBool" -> IdDz {reject}
    "asinFloat" -> IdDz {reject}
    "replace" -> IdDz {reject}
    "String2KLabel" -> IdDz {reject}
    "FROM" -> IdDz {reject}
    "while" -> IdDz {reject}
    "isToken" -> IdDz {reject}
    "substrString" -> IdDz {reject}
    "atan2Float" -> IdDz {reject}
    "Int2String" -> IdDz {reject}
    "absFloat" -> IdDz {reject}
    "maxFloat" -> IdDz {reject}
    "true" -> IdDz {reject}
    "UNSTRING" -> IdDz {reject}
    "Char2String" -> IdDz {reject}
    "String2Char" -> IdDz {reject}
    "keys" -> IdDz {reject}
    "modInt" -> IdDz {reject}
    "minInt" -> IdDz {reject}
    "values" -> IdDz {reject}
    "orElseBool" -> IdDz {reject}
    "findChar" -> IdDz {reject}
    "logFloat" -> IdDz {reject}
    "Id2String" -> IdDz {reject}
    "TIMES" -> IdDz {reject}
    "exponentFloat" -> IdDz {reject}
    "rtrim" -> IdDz {reject}
    "inKList" -> IdDz {reject}
    "UNTIL" -> IdDz {reject}
    "int" -> IdDz {reject}
    "SetItem" -> IdDz {reject}
    "andBool" -> IdDz {reject}
    [\-\+]? [0-9]+ -> DzIntDz
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    IdDz -> Id {cons("Id1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    Id -/- [A-Za-z0-9\_]
    DzInt -/-  [0-9]
